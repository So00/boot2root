Dump of assembler code for function fun7:
    0x08048e94 <+0>:	push   %ebp
    /* ESP = EBP - 8 
        EBP c'est carrement un pointeur,
        du coup eax = ebp + 12 (notre chiffre) et edx = ebp + 8
    */
    0x08048e95 <+1>:	mov    %esp,%ebp
    0x08048e97 <+3>:	sub    $0x8,%esp
    0x08048e9a <+6>:	mov    0x8(%ebp),%edx
    0x08048e9d <+9>:	mov    0xc(%ebp),%eax
    /* si edx == 0 on saute a la suite*/
    0x08048ea0 <+12>:	test   %edx,%edx
    0x08048ea2 <+14>:	jne    0x8048eb0 <fun7+28>
    |
    |    0x08048ea4 <+16>:	mov    $0xffffffff,%eax
    |    0x08048ea9 <+21>:	jmp    0x8048ee2 <fun7+78>
    |    0x08048eab <+23>:	nop
    |    0x08048eac <+24>:	lea    0x0(%esi,%eiz,1),%esi
    |
    |
    /* else if */
    0x08048eb0 <+28>:	cmp    (%edx),%eax
    0x08048eb2 <+30>:	jge    0x8048ec5 <fun7+49>
    |    0x08048eb4 <+32>:	add    $0xfffffff8,%esp
    |    0x08048eb7 <+35>:	push   %eax
    |    0x08048eb8 <+36>:	mov    0x4(%edx),%eax
    |    0x08048ebb <+39>:	push   %eax
    |    0x08048ebc <+40>:	call   0x8048e94 <fun7>
    |    0x08048ec1 <+45>:	add    %eax,%eax
    |    0x08048ec3 <+47>:	jmp    0x8048ee2 <fun7+78>
    /* else if */
    0x08048ec5 <+49>:	cmp    (%edx),%eax
    0x08048ec7 <+51>:	je     0x8048ee0 <fun7+76>
    |
    |    0x08048ec9 <+53>:	add    $0xfffffff8,%esp
    |    0x08048ecc <+56>:	push   %eax
    |    0x08048ecd <+57>:	mov    0x8(%edx),%eax
    |    0x08048ed0 <+60>:	push   %eax
    |    0x08048ed1 <+61>:	call   0x8048e94 <fun7>
    |    0x08048ed6 <+66>:	add    %eax,%eax
    |    0x08048ed8 <+68>:	inc    %eax
    |    0x08048ed9 <+69>:	jmp    0x8048ee2 <fun7+78>
    |    0x08048edb <+71>:	nop
    |    0x08048edc <+72>:	lea    0x0(%esi,%eiz,1),%esi
    |
    0x08048ee0 <+76>:	xor    %eax,%eax
    0x08048ee2 <+78>:	mov    %ebp,%esp
    0x08048ee4 <+80>:	pop    %ebp
    0x08048ee5 <+81>:	ret
End of assembler dump.


int fun7(int nb)
{

}
